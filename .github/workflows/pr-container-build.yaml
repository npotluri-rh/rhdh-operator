name: PR Build operator, bundle, and catalog images

on:
  # /!\ Warning: using the pull_request_target event to be able to read secrets. But using this event without the cautionary measures described below
  # may allow unauthorized GitHub users to open a “pwn request” and exfiltrate secrets.
  # As recommended in https://iterative.ai/blog/testing-external-contributions-using-github-actions-secrets,
  # we are adding an 'authorize' job that checks if the workflow was triggered from a fork PR. In that case, the "external" environment
  # will prevent the job from running until it's approved manually by human intervention.
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: 
      - main
      # - rhdh-1.[0-9]+
      # - 1.[0-9]+.x
      # - release-1.[0-9]+
      - RHIDP-7359-SL-PR

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.event.pull_request.head.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ vars.REGISTRY }}

jobs:
  authorize:
    # The 'external' environment is configured with the odo-maintainers team as required reviewers.
    # All the subsequent jobs in this workflow 'need' this job, which will require manual approval for PRs coming from external forks.
    # see list of approvers in OWNERS file
    environment:
      ${{ (github.event.pull_request.head.repo.full_name == github.repository ||
        contains(fromJSON('["coreydaley","gazarenkov","kadel","nickboldt","rm3l","kim-tsao","openshift-cherrypick-robot"]'), github.actor)) && 'internal' || 'external' }}
    runs-on: ubuntu-latest
    steps:
      - name: approved
        run: |
          echo "✓"

  pr-build:
    name: PR Publish
    runs-on: ubuntu-latest
    needs: authorize
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          repository: ${{github.event.pull_request.head.repo.full_name}}
          ref: ${{ github.event.pull_request.head.ref }}

      # check changes in this commit for regex include and exclude matches
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46.0.5
        with:
          files: |
            .github/workflows/pr-container-build.yaml
            Makefile
            **/*.go
            bundle/**
            config/**
            go.mod
            go.sum
            LICENSE
            **/Dockerfile
            **/Containerfile
            **/*.Dockerfile
            **/.dockerignore
          files_ignore: |
            **/*.md
            **/*.adoc
            .rhdh/**
            tests/** 

      - name: List all changed files (for troubleshooting)
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done

      - name: Setup Go
        # run this stage only if there are changes that match the includes and not the excludes
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: 'go.mod'

      - name: Get the last commit short SHA of the PR
        # run this stage only if there are changes that match the includes and not the excludes
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          BASE_VERSION=$(grep -E "^VERSION \?=" Makefile | sed -r -e "s/.+= //") # 0.0.1
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV

      - name: Store build timestamp
        run: echo "BUILD_TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - name: Write SeaLights token into file
        if: steps.changed-files.outputs.any_changed == 'true'
        run: echo "${SEALIGHTS_AGENT_TOKEN}" > sltoken.txt
        env:
          SEALIGHTS_AGENT_TOKEN: '${{secrets.SEALIGHTS_AGENT_TOKEN}}' ## Make sure to add token to repo secrets

      - name: Download SeaLights Go agent and CLI tool
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
            echo "[SeaLights] Downloading SeaLights Golang & CLI Agents..."
            # Architectures available: darwin-amd64, darwin-arm64, linux-amd64, linux-arm64
            SL_OS_ARCH=linux-amd64
            SL_GO_AGENT_VERSION=v1.1.195
            SL_CLI_AGENT_VERSION=v1.0.49

            wget -nv -O sealights-go-agent.tar.gz https://agents.sealights.co/slgoagent/${SL_GO_AGENT_VERSION}/slgoagent-${SL_OS_ARCH}.tar.gz
            wget -nv -O sealights-slcli.tar.gz https://agents.sealights.co/slcli/${SL_CLI_AGENT_VERSION}/slcli-${SL_OS_ARCH}.tar.gz

            tar -xzf ./sealights-go-agent.tar.gz && tar -xzf ./sealights-slcli.tar.gz 
            rm -f ./sealights-go-agent.tar.gz ./sealights-slcli.tar.gz 
            ./slgoagent -v 2> /dev/null | grep version && ./slcli -v 2> /dev/null | grep version

      - name: Initiating the SeaLights agent
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "[SeaLights] Initiating the SeaLights agent to Golang and handing it the token"
          ./slcli config init --lang go --token ./sltoken.txt

      - name: Configuring SeaLights
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "[SeaLights] Configuring SeaLights to scan the pull request branch"
          echo "Latest commit sha: ${LATEST_COMMIT_SHA}"
          echo "PR Number: ${PULL_REQUEST_NUMBER}"
          echo "Target Branch: ${TARGET_BRANCH}"
          echo "REPO_URL: ${REPO_URL}"
          ./slcli config create-pr-bsid --app rhdh-operator --target-branch ${TARGET_BRANCH} --pull-request-number ${PULL_REQUEST_NUMBER} --latest-commit ${LATEST_COMMIT_SHA} --repository-url https://github.com/npotluri-rh/rhdh-operator.git
        env:
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
          LATEST_COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          TARGET_BRANCH: ${{ github.event.pull_request.base.ref }} #github.event.pull_request.base.ref # github.base_ref 
          REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY

      - name: Run SeaLights scan for tests
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "[SeaLights] Running the SeaLights scan"
          ./slcli scan --bsid buildSessionId.txt  --path-to-scanner ./slgoagent --workspacepath "./" --scm git --scmBaseUrl https://github.com/npotluri-rh/rhdh-operator --scmProvider github
# SEALIGHTS_LAB_ID

      - name: Start Minikube
        if: steps.changed-files.outputs.any_changed == 'true'
        # run this stage only if there are changes that match the includes and not the excludes
        uses: medyagh/setup-minikube@cea33675329b799adccc9526aa5daccc26cd5052 # v0.0.19

      - name: Run Controller
        if: steps.changed-files.outputs.any_changed == 'true'
        # run this stage only if there are changes that match the includes and not the excludes
        run: |
          # Need to 'make install' first, so that the necessary tool binaries (like controller-gen) can be downloaded locally.
          # Otherwise, we might end up with a race condition where the tool binary is not yet downloaded,
          # but the `make test` command tries to use it.
          make manifests generate fmt vet install
          make run &

      - name: Test
        if: steps.changed-files.outputs.any_changed == 'true'
        # run this stage only if there are changes that match the includes and not the excludes
        run: make test

      - name: Generic Integration test
        if: steps.changed-files.outputs.any_changed == 'true'
        # run this stage only if there are changes that match the includes and not the excludes
        # perform it on backstage.io for speed
        run: make integration-test PROFILE=backstage.io USE_EXISTING_CLUSTER=true USE_EXISTING_CONTROLLER=true

      - name: Clean all SeaLights secret stuff
        if: always() && steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "[SeaLights] Cleaning up after SeaLights run"
          rm sltoken.txt

      # - name: Login to registry (${{env.REGISTRY}})
      #   # run this stage only if there are changes that match the includes and not the excludes
      #   if: steps.changed-files.outputs.any_changed == 'true'
      #   uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ vars.QUAY_USERNAME }}
      #     password: ${{ secrets.QUAY_TOKEN }}

      # - name: Build and push operator, bundle, and catalog images
      #   # run this stage only if there are changes that match the includes and not the excludes
      #   if: steps.changed-files.outputs.any_changed == 'true'
      #   run: |
      #     # install skopeo, podman
      #     sudo apt-get -y update; sudo apt-get -y install skopeo podman

      #     export CONTAINER_TOOL=podman 
      #     export VERSION=${{ env.BASE_VERSION }}-pr-${{ github.event.number }}-${{ env.SHORT_SHA }} 
      #     export REGISTRY_WITH_ORG=${{ env.REGISTRY }}/${{ env.REGISTRY_ORG }}
      #     export OPERATOR_IMAGE_NAME=${OPERATOR_IMAGE_NAME:-operator}
      #     export IMAGE_TAG_BASE=${REGISTRY_WITH_ORG}/${OPERATOR_IMAGE_NAME}

      #     set -ex

      #     # build 4 container images with a 14d expiry
      #     CONTAINER_TOOL=${CONTAINER_TOOL} VERSION=${VERSION} make lint release-build

      #     # now copy images from local cache to quay, using 0.0.1-pr-123-f00cafe and 0.0.1-pr-123 tags
      #     for image in ${OPERATOR_IMAGE_NAME} ${OPERATOR_IMAGE_NAME}-bundle ${OPERATOR_IMAGE_NAME}-catalog; do
      #       podman push -q ${REGISTRY_WITH_ORG}/${image}:${VERSION} docker://${REGISTRY_WITH_ORG}/${image}:${VERSION}
      #       skopeo --insecure-policy copy --all docker://${REGISTRY_WITH_ORG}/${image}:${VERSION} docker://${REGISTRY_WITH_ORG}/${image}:${VERSION}
      #       skopeo --insecure-policy copy --all docker://${REGISTRY_WITH_ORG}/${image}:${VERSION} docker://${REGISTRY_WITH_ORG}/${image}:${VERSION%-*}
      #     done
      #   env:
      #     REGISTRY_ORG: ${{ vars.REGISTRY_ORG }}
      #     OPERATOR_IMAGE_NAME: ${{ vars.OPERATOR_IMAGE_NAME }}
      #     # to avoid throttling on RHD org, use GH token
      #     GH_TOKEN: ${{ secrets.RHDH_BOT_TOKEN }}
      # - name: Comment image links in PR
      #   # run this stage only if there are changes that match the includes and not the excludes
      #   if: steps.changed-files.outputs.any_changed == 'true'
      #   uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      #   with:
      #     script: |
      #       await github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'PR images are available:<br/><ol><li>https://quay.io/rhdh-community/operator:${{ env.BASE_VERSION }}-pr-${{ github.event.number }}-${{ env.SHORT_SHA }}</li><li>https://quay.io/rhdh-community/operator-bundle:${{ env.BASE_VERSION }}-pr-${{ github.event.number }}-${{ env.SHORT_SHA }}</li><li>https://quay.io/rhdh-community/operator-catalog:${{ env.BASE_VERSION }}-pr-${{ github.event.number }}-${{ env.SHORT_SHA }}</li></ol>'
      #       })